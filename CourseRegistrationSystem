import java.util.*;

class Course {
    private String code;
    private String title;
    private String description;
    private int capacity;
    private List<String> schedule;
    private Set<String> enrolledStudents;

    public Course(String code, String title, String description, int capacity, List<String> schedule) {
        this.code = code;
        this.title = title;
        this.description = description;
        this.capacity = capacity;
        this.schedule = schedule;
        this.enrolledStudents = new HashSet<>();
    }

    public String getCode() {
        return code;
    }

    public String getTitle() {
        return title;
    }

    public String getDescription() {
        return description;
    }

    public int getCapacity() {
        return capacity;
    }

    public List<String> getSchedule() {
        return schedule;
    }

    public Set<String> getEnrolledStudents() {
        return enrolledStudents;
    }

    public boolean enrollStudent(String studentId) {
        if (enrolledStudents.size() < capacity) {
            enrolledStudents.add(studentId);
            return true;
        }
        return false;
    }

    public boolean dropStudent(String studentId) {
        return enrolledStudents.remove(studentId);
    }
}

class Student {
    private String id;
    private String name;
    private Set<String> registeredCourses;

    public Student(String id, String name) {
        this.id = id;
        this.name = name;
        this.registeredCourses = new HashSet<>();
    }

    public String getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public Set<String> getRegisteredCourses() {
        return registeredCourses;
    }

    public void registerCourse(String courseCode) {
        registeredCourses.add(courseCode);
    }

    public void dropCourse(String courseCode) {
        registeredCourses.remove(courseCode);
    }
}

public class CourseRegistrationSystem {
    private Map<String, Course> courses;
    private Map<String, Student> students;

    public CourseRegistrationSystem() {
        this.courses = new HashMap<>();
        this.students = new HashMap<>();
    }

    public void addCourse(String code, String title, String description, int capacity, List<String> schedule) {
        Course course = new Course(code, title, description, capacity, schedule);
        courses.put(code, course);
    }

    public void addStudent(String id, String name) {
        Student student = new Student(id, name);
        students.put(id, student);
    }

    public void displayCourses() {
        System.out.println("Available Courses:");
        for (Course course : courses.values()) {
            System.out.println("Course Code: " + course.getCode());
            System.out.println("Title: " + course.getTitle());
            System.out.println("Description: " + course.getDescription());
            System.out.println("Capacity: " + course.getCapacity());
            System.out.println("Schedule: " + course.getSchedule());
            System.out.println("Enrolled Students: " + course.getEnrolledStudents().size());
            System.out.println("------------------------");
        }
    }

    public void displayAvailableCourses() {
        System.out.println("Available Courses:");
        for (Course course : courses.values()) {
            int availableSlots = course.getCapacity() - course.getEnrolledStudents().size();
            System.out.println("Course Code: " + course.getCode());
            System.out.println("Title: " + course.getTitle());
            System.out.println("Description: " + course.getDescription());
            System.out.println("Available Slots: " + availableSlots + "/" + course.getCapacity());
            System.out.println("Schedule: " + course.getSchedule());
            System.out.println("------------------------");
        }
    }

    public void displayStudentSummary(String studentId) {
        Student student = students.get(studentId);
        if (student != null) {
            Set<String> registeredCourses = student.getRegisteredCourses();
            System.out.println("Student ID: " + studentId);
            System.out.println("Name: " + student.getName());
            System.out.println("Registered Courses:");
            for (String courseCode : registeredCourses) {
                Course course = courses.get(courseCode);
                System.out.println("Course Code: " + course.getCode());
                System.out.println("Title: " + course.getTitle());
                System.out.println("Description: " + course.getDescription());
                System.out.println("------------------------");
            }
            System.out.println("Total Courses Registered: " + registeredCourses.size());
        } else {
            System.out.println("Student not found.");
        }
    }

    public void registerStudentForCourse(String studentId, String courseCode) {
        Student student = students.get(studentId);
        Course course = courses.get(courseCode);
        if (student != null && course != null && course.enrollStudent(studentId)) {
            student.registerCourse(courseCode);
            System.out.println("Student " + studentId + " registered for course " + courseCode);
        } else {
            System.out.println("Registration failed. Please check student ID and course code.");
        }
    }

    public void dropStudentFromCourse(String studentId, String courseCode) {
        Student student = students.get(studentId);
        Course course = courses.get(courseCode);
        if (student != null && course != null && course.dropStudent(studentId)) {
            student.dropCourse(courseCode);
            System.out.println("Student " + studentId + " dropped from course " + courseCode);
        } else {
            System.out.println("Drop failed. Please check student ID and course code.");
        }
    }

    public static void main(String[] args) {
        CourseRegistrationSystem system = new CourseRegistrationSystem();

        // Adding courses
        system.addCourse("CS101", "Introduction to Computer Science", "Basic concepts of computer science", 30, Arrays.asList("Mon 10:00 AM", "Wed 10:00 AM"));
        system.addCourse("ENG201", "English Literature", "Survey of English literature", 25, Arrays.asList("Tue 1:00 PM", "Thu 1:00 PM"));
        system.addCourse("MATH301", "Calculus", "Advanced calculus topics", 20, Arrays.asList("Mon 1:00 PM", "Wed 1:00 PM"));

        // Adding students
        system.addStudent("1001", "Alice");
        system.addStudent("1002", "Bob");
        system.addStudent("1003", "Charlie");

        // Display available courses
        system.displayAvailableCourses();

        // Register students for courses
        system.registerStudentForCourse("1001", "CS101");
        system.registerStudentForCourse("1001", "ENG201");
        system.registerStudentForCourse("1002", "CS101");

        // Display updated course enrollment
        system.displayAvailableCourses();

        // Drop a student from a course
        system.dropStudentFromCourse("1001", "CS101");

        // Display updated course enrollment
        system.displayAvailableCourses();

        // Display student summary
        system.displayStudentSummary("1001");
    }
}
